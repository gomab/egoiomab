
  ____________________________________Multi-auth and Roles Relationship____________________________________________


1. run server
    $ php artisan serve

2. Auth
    $ php artisan make:auth

3. Set-up migrations create_users_table.php

4. Make Role model
    $ php artisan make:model Role -m

5. Set-up migration Role_table.php

6. set-up Model Role.php

        public function users(){}

7. set-up Model User.php

        public function role(){}

8. Make seed user
    $ php artisan make:seed UsersTableSeeder


9. Make seed role
    $ php artisan make:seed RolesTableSeeder


10. Set-up RolesTablesSeeders

11. Set-up UsersTablesSeeders

12. Set-up database (.env file and phpadmin)

13. Migrate DB
    $ php artisan migrate

14. Set-up ./seed/DatabaseSeeder.php
    public function run(){}

15. Migrate seed
    $ php artisan db:seed


16. Set-up tinker
    $ php artisan tinker

            App\User::find(1);
            App\User::find(1)->role;
            App\Role::find(1)
            App\Role::find(1)->users




/************Commentaire***********/

* Mettre 3 comme valeur par défaut role_id parce que j'aurai 3 types de user
  (Put 3 as default value for role_id because i will have 3 types of users.)

* Name = user

* Ne pas oublié le 3e role dans les seeders
  (Don't forget the 3tht role in the seeders)


  ____________________________________End Multi-auth and Roles Relationship____________________________________________


___________________________________________Multi Auth Middleware_____________________________________________________________________________

1. Make Admin/Dashboard Controller -R
    $ php artisan make:controller Admin/DashboardController

2. Make Author/Dashboard Controller -R
    $ php artisan make:controller Author/DashboardController

3. Make admin middleware
    $ php artisan make:middleware AdminMiddleware

4. Make author middleware
    $ php artisan make:middleware AuthorMiddleware

5. Set-up app/Http/kernel.php
    Add -> 'admin'    / AdminMiddleware::class, / in protected $routeMiddleware


6. Set-up app/Http/kernel.php
    Add -> 'author'    / AuthorMiddleware::class, / in protected $routeMiddleware

7. Set-up  group Route Admin => ./routes/web.php and route::dashboard->index -> V

8. Set-up  group Route Author => ./routes/web.php and route::dashboard->index -> V

9. Create folder ./views/admin/dashboard.blade.php  -> V

10. Create folder ./views/author/dashboard.blade.php -> V

11. copy content of ./resources/views/home.blade.php in dashboard(author and admin) -> V

12. Set-up admin/dashboard.blade.php
    / You are logged in! as <strong>{{ Auth::user()->name }}</strong>/ --> V

13. Set-up author/dashboard.blade.php
    / You are logged in! as <strong>{{ Auth::user()->name }}</strong>/ --> V

14. Set-up ./app/http/Controllers/Admin/DashboardController.php  --> V
     / public function index() /

15. Set-up ./app/http/Controllers/Author/DashboardController.php  --> V
     / public function index() /

16. Setup  ./app/http/Middleware/AdminMiddleware.php  -->

         if(Auth::check() && Auth::user()->role->id = 1){
            return $next($request)
         }else{
            return $redirect()->route('login')
         }
        /if/

17. See list route --> V
    $ php artisan r:l

18. Setup  ./app/http/Middleware/AuthorMiddleware.php --> V
        /if/

19. Setup ./app/http/Middleware/RedirectIfAuthenticated.php  --> V
    /if -elseif - else ine function handle/

20. Setup   ./app/Http/Controllers/Auth/LoginController.php  --> V
    Delete 'home'
    -> protected $redirectTo ;

    -> Setup public function __construct()

21. Setup   ./app/Http/Controllers/Auth/RegisterController.php  --> V
    Delete 'home'
    -> protected $redirectTo ;

    -> Setup public function __construct()

22. Setup   ./app/Http/Controllers/Auth/ResetPasswordController.php  --> V
    Delete 'home'
    -> protected $redirectTo ;

    -> Setup public function __construct()


/***********************Comment**********************************************
1. make User/Dashboard Controller and Middleware

3. Set

_____________________________________________End Multi Auth Middleware_____________________________________________________________________

_____________________________________________Frontend Layout__________________________________________________

1. Download Bona
    https://colorlib.com/wp/template/bona/

2. download backend layout
    https://github.com/gurayyarar/AdminBSBMaterialDesign

3. Create folder     ./public/assets *

4. create folder ../../assets/backend and frontend *

5. Create ../../fronted/css and js  *

6. Copy content common-css to ../public/assets/frontend/css *

7. Copy content common-js to ../public/assets/frontend/js *

8. Copy bona/image and fonts to ../public/assets/fronted/

9. Create ../resources/views/layouts/  fronted

10. Copy ../resources/views/layouts/app.blade.php to ../resources/views/layouts/fronted/app.blade.php

11. Delete <body> Content, <style> content and <script> to fronted/app.blade.php

12. Copy to page bona/front-page-category section : header , main-slider, blog-area section, footer in <body> ../fronted/app.blade.php

13. Create folder  ../layouts/fronted/partial

14. create ../fronted/partial/ header.blade.php

15. Cut section <header> in ../frontend/app.blade.php to ../frontend/partial/header.blade.php

16. Include ../partial/header to ../fronted/app.blade.php  =>  @include('layouts.fronted.partial.header')

17. (14-15-16) for footer

18. Delete content ../layouts/welcome.blade.php

19. Setup ../layouts/welcome.blade.php
        @extends('layouts.frontend.app')

        @section('content')
          -----
        @endsection


20. Copy section <main-slider> and <blog-area section> in welcome.blade.php =>  @section('content')

21. Set-up ../frontend/app.blade.php
        @yield('content')

22. Set-up .env
        APP_NAME=blog

23. Set-up  ../frontend/app.blade.php in <title>@yield('title') - </title>

24. Add section title in ../layouts/welcome.blade.php
    @section('title', 'login')

25. Copy Font and Styleshit content in bona/front-page-category to app.blade.php

26. In ../frontend/app.blade.php
            @stack('css')

27. create section in welcome.blade.php
            @push('css')

            @endpush

28. Cut in ../frontend/app.blade.php ---- To @push section (welcome.blade.php)

           <link href="front-page-category/css/styles.css" rel="stylesheet">
           <link href="front-page-category/css/responsive.css" rel="stylesheet">

29. Copy Script content in bona/front-page-category to app.blade.php

29. (26 & 27) for js

30. Set-up asset{} to ../frontend/app.blade.php
        <link href="{{ asset('assets/frontend/css/bootstrap.css') }}" rel="stylesheet">


31. copy style fichier of bony/front-page-category to ../public/assets/frontend/css/ home/

32. Set-up asset ton welcome.blade.php
         <link href="{{ asset('assets/frontend/css/home/styles.css') }}" rel="stylesheet">

33. Delete Tag img to header.blade.php
        <img src="images/logo.png" alt="Logo Image">

33. setp-up asset js to app.blade.php

34. Cut  <script src="{{ asset('assets/frontend/js/swiper.js') }}"></script> to puhs js

35. Setup ../views/auth/login.blade.php
    @extends('layouts.fronted.app')

36. Setup ../views/auth/login.blade.php
        add @section('title', 'Login'), @push('css') and @push('js')

37. Copy to bona/blank-static/css content  to ../public/assets/frontend/css/auth

38. Setup login.blade.php @section('css')
    @push('css')
        <link href="{{ asset('assets/frontend/css/auth/styles.css') }}" rel="stylesheet">
        <link href="{{ asset('assets/frontend/css/auth/responsive.css') }}" rel="stylesheet">
    @endpush


39. Copy  two sections to bona/blank-statik to login.blade.php in @section('content')

40. copy <form> tag to @section('content') laravel form , login.blade.php to


41. mm chose pour Register

42. Add name home to ../Route/web.php
        Route::get('/', function () {
            return view('welcome');
        })->name('home');

43. delete neame home to route
        Route::get('/home', 'HomeController@index')->name('');


------------------------------Coments--------------------------------------------------
1. Login page is in folder ../views/auth/login.blade.php

_______________________________________Part 4 CREATE BLOG LAYOUT ______________________________________________________________________

1. Copy folders images, plugin, css, js to Admin template in ../public/assets/backend

2. Copy ../../views/layouts/frontend/app.blade.php to ../../views/layouts/backend/

3. Delete section <font> , <style>, include in <body> and <script>

4. copy admin-templete/index.html content of <section> body to ../backend/app.blade.php,

5. Create folder  ../layouts/backend/partial

6. Create ../layouts/backend/partial/topbar.blade.php

7. Cut section <navbar></navbar> of ../backend/app.blade.php to ../partial/topbar.blade.php

8. Include in app.blade.php => @include('layouts.backend.partial.topbar')

7. Create ../layouts/backend/partial/sidebar.blade.php

7. Cut section <left sidebar></sidebar> of ../backend/app.blade.php to ../partial/sidebar.blade.php

8. Include in app.blade.php => @include('layouts.backend.partial.sidebar')

9. Copy <Favicon>, ..., <AdminBSB Themes. You can choose a theme from css/themes instead of get all themes>
    of ../Admin-theme/index.html to ../backend/app.blade.php

10. Set-up asset('') =>  <link href="{{ asset('assets/backend/css/style.css') }}" rel="stylesheet">

11. Copy all scripts of ../admin-template/index.html to ../backend/app.blade.php

12. Set-up asset('') script  =>  <script src="{{ asset('assets/backend/plugins/node-waves/waves.js') }}"></script>

13. Set-up file ../views/admin/dashboard.blade.php (delete <section> content) and @extends('layouts.backend.app')

14. Cut  <div class="container-fluid> of ../backend/app.blade.php to ../views/admin/dashboard.blade.php

15. Add @section('title', 'Dashboard', @push('css') and @push('js')

16. Put in comment <Notifications> in ../pattial/sidebar.blade.php

17. SetUp ../partial/sidebar.blade.php    =>  {{ Auth::user()->name }} and {{ Auth::user()->email }}

18. Setup image asset in ../partial/sidebar.php => {{ asset('assets/backend/images/user.png') }}

19. in ../partial/sidebar.php delete <li> offten home li

20. Setup Link  in ../partial/sidebar.php <a href="{{ route('admin.dashboard') }}">


______________________________________________ENd Part 4________________________________________________________________________


_________________________Part 5 Define Backend Layout to Author Dashboard ANd Fixing Sidebar________________________________________________________________________
1. Copy of

        <a class="dropdown-item" href="{{ route('logout') }}"
           onclick="event.preventDefault();
                         document.getElementById('logout-form').submit();">
            {{ __('Logout') }}
        </a>

        <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
            @csrf
        </form>

        on ../layouts/app.blade.php to ../partial/sidebar.blade.php after
        <li><a href="javascript:void(0);"><i class="material-icons">person</i>Profile</a></li>

2. Set-up <li>
        <li>
            <a class="dropdown-item" href="{{ route('logout') }}"
               onclick="event.preventDefault();
                                         document.getElementById('logout-form').submit();">

                <i class="material-icons">input</i>Sign Out
            </a>

            <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                @csrf
            </form>

        </li>


3. Copy content ../views/admin.dashboard.blade.php to ../views/author.dashboard.blade.php

4. Setup ../partial/sidebar.blade.php => Request
    @if(Request::is('admin*'))

        <li class="active">
            <a href="{{ route('admin.dashboard') }}">
                <i class="material-icons">home</i>
                <span>Home</span>
            </a>
        </li>

    @endif


    @if(Request::is('admin*'))



    @endif


5. link
     <li class="{{ Request::is('admin/dashboard') ? 'active' : '' }}">
                        <a href="{{ route('admin.dashboard') }}">
                            <i class="material-icons">home</i>
                            <span>Home</span>
                        </a>
                    </li>


6. Rename home by dashboard and Home => Dashboard

________________________________________________________________________________________________________________________


________________________________Part 6 Create Tag and show with database________________________________________________

1. Make model Tag
    $ php artisan make:model Tag -m

2. Setup migration Create_Tag => ../migrations/create_tags_table.php
        Add column name and slug

3. Make migration
    $ php artisan migrate

4. Make admin Tag controller
    $ php artisan make:controller Admin/TagController -r

5. See list of routes
    $ php artisan route:list or php artisan r:l

6. Add Tag route in Admin route group | ../routes/web.php

        code: Route::resource('tag', 'TagController');


        /** Route Admin */

        Route::group(['as'=>'admin.','prefix'=> 'admin', 'namespace'=>'Admin', 'middleware'=>['auth','admin']],
            function (){
            Route::get('dashboard', 'DashboardController@index')->name('dashboard');
            Route::resource('tag', 'TagController');
        });

7. Create directory   ../resources/views/admin/tag/index.blade.php

8. Setup ../resources/views/admin/tag/index.blade.php
            ----------------------------------------------
            @extends('layouts.backend.app')


            @section('title', 'Tag')


            @push('css')




            @endpush



            @section('content')



            @endsection


            @push('js')



            @endpush
            ---------------------------------------------


 9. Setup TagController.php => function index()
               public function index()
                {
                    //
                    return view('admin.tag.index');
                }


 10. Setup add  blog <tag>../views/layouts/backend/partial/sidebar.blade.php

                    <li class="{{ Request::is('admin/tag') ? 'active' : '' }}">
                        <a href="{{ route('admin.tag.index') }}">
                            <i class="material-icons">label</i>
                            <span>Tag</span>
                        </a>
                    </li>


10. Open ../Admin template/pages/tables/jquery-datatable.html

11. Add asset to ../views/admin/tag/index.blade.php to @push('css')
     <!-- JQuery DataTable Css -->
        <link href="{{ asset('assets/backend/plugins/jquery-datatable/skin/bootstrap/css/dataTables.bootstrap.css') }}" rel="stylesheet">

12. Copy <div class="container-fluid"> to @section('content') | ../views/admin/tag/index.blade.php

13. (11) => @push('js')
      <!-- Jquery DataTable Plugin Js -->
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/jquery.dataTables.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/skin/bootstrap/js/dataTables.bootstrap.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/dataTables.buttons.min.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/buttons.flash.min.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/jszip.min.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/pdfmake.min.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/vfs_fonts.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/buttons.html5.min.js') }}"></script>
          <script src="{{ asset('assets/backend/plugins/jquery-datatable/extensions/export/buttons.print.min.js') }}"></script>

14.  CUt  <script src="{{ asset('assets/backend/js/pages/index.js') }}"></script>
     to @push('js') in ../layouts/backend/app.blade.php
     and copy this in ../views/admin/dashboard.blade.php

15. (14)
     <!-- Jquery CountTo Plugin Js -->
        <script src="{{ asset('assets/backend/plugins/jquery-countto/jquery.countTo.js') }}"></script>

        <!-- Morris Plugin Js -->
        <script src="{{ asset('assets/backend/plugins/raphael/raphael.min.js') }}"></script>
        <script src="{{ asset('assets/backend/plugins/morrisjs/morris.js') }}"></script>

        <!-- ChartJs -->
        <script src="{{ asset('assets/backend/plugins/chartjs/Chart.bundle.js') }}"></script>

        <!-- Flot Charts Plugin Js -->
        <script src="{{ asset('assets/backend/plugins/flot-charts/jquery.flot.js') }}"></script>
        <script src="{{ asset('assets/backend/plugins/flot-charts/jquery.flot.resize.js') }}"></script>
        <script src="{{ asset('assets/backend/plugins/flot-charts/jquery.flot.pie.js') }}"></script>
        <script src="{{ asset('assets/backend/plugins/flot-charts/jquery.flot.categories.js') }}"></script>
        <script src="{{ asset('assets/backend/plugins/flot-charts/jquery.flot.time.js') }}"></script>

        <!-- Sparkline Chart Plugin Js -->
        <script src="{{ asset('assets/backend/plugins/jquery-sparkline/jquery.sparkline.js') }}"></script>


16. Setup ../view/admin/tag/index.blade.php => @push('js')

    <!-- Custom Js -->
        <script src="{{ asset('assets/backend/js/pages/tables/jquery-datatable.js') }}"></script>


17. Create ../admin/tag/create.blade.php

18. Setup function create()  |  ../Controllers/Admin/TagController.php
     public function create()
        {
            //
           return view('admin.tag.create');

           }


19. Setup (add *)    ../layouts/backend/partial/sidebar.blade.php
        <li class="{{ Request::is('admin/tag*') ? 'active' : '' }}">


20. Setup ../admin/tag/index.blade.php
        <div class="block-header">
            <a class="btn btn-primary waves-effect" href="{{ route('admin.tag.create') }}">
                <i class="material-icons">add</i>
                <span>Add new Tag</span>
            </a>
        </div>


21. Copy  <!-- Vertical Layout | With Floating Label --> to ../admin-template/pages/forms/forms-example.html
    (<div class="container-fluid">)
    In ../admin/tag/create.blade.php ==> @push('content')


22. Setup  ../admin/tag/create.blade.php ==> @push('content')
           - Delete
                <div class="block-header">
                    <h2>FORM EXAMPLES</h2>
                </div>

           - Add
                <h2>
                   ADD NEW TAG
                </h2>


           - Costum
                <div class="body">
                    <form action="{{ route('admin.tag.store') }}" method="POST">
                        @csrf

                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="text" id="name" name="name" class="form-control">
                                <label class="form-label">Tag Name</label>
                            </div>
                        </div>


                        <a class="btn btn-danger m-t-15 waves-effect">BACK</a>

                        <button type="button" class="btn btn-primary m-t-15 waves-effect">SAVE</button>
                    </form>
                </div>



23. Setup ../tag/create.blade.php => type = submit
     <button type="submit" class="btn btn-primary m-t-15 waves-effect">SAVE</button>



24. Setup function store(Request $request)  => ../controllers/TagController.php


    public function store(Request $request)
        {
            //
            $this->validate($request, [
               'name' => 'required'
            ]);

            //return $request;

            $tag = new Tag();
            $tag->name = $request->name;
            $tag->slug = str_slug($request->name);
            $tag->save();

            return redirect()->back();
        }


25.  Toastr
    1- Link
        https://github.com/brian2694/laravel-toastr

    2- Install
        $ composer require brian2694/laravel-toastr

    3- Costum option
        $ php artisan vendor:publish

    4- Choice : 2

    5- Copy
        <!-- Toastr -->
        <link rel="stylesheet" href="http://cdn.bootcss.com/toastr.js/latest/css/toastr.min.css">

        To ../backend/app.blade.php => push('css')

    6- Copy
        <!-- Toastr  -->
        <script src="http://cdn.bootcss.com/toastr.js/latest/js/toastr.min.js"></script>
        {!! Toastr::message() !!}

         To ../backend/app.blade.php => push('js')

    7- Copy
        <!-- Toastr -->
        <link rel="stylesheet" href="http://cdn.bootcss.com/toastr.js/latest/css/toastr.min.css">

        To ../frontend/app.blade.php ==> <head>

    8- Copy
        <!-- Toastr  -->
        <script src="http://cdn.bootcss.com/toastr.js/latest/js/toastr.min.js"></script>
        {!! Toastr::message() !!}

         To ../frontend/app.blade.php



26. Config option Toastr => ../config/toastr.php
        "closeButton" => true,
        "debug" => false,
        "newestOnTop" => true,
        "progressBar" => true,

27. Setup ../TagController.php => function store(Request $request)
        {

            Toastr::success('Tag Succesfully Saved', 'Success');

            return redirect()->route('admin.tag.index');
        }


28. Add s to http =>../view/layouts/backend/app.bladde.php
        <!-- Toastr -->
        <link rel="stylesheet" href="https://cdn.bootcss.com/toastr.js/latest/css/toastr.min.css">

        <!-- Toastr  -->
        <script src="https://cdn.bootcss.com/toastr.js/latest/js/toastr.min.js"></script>


29. Setup ../view/layouts/backend/app.bladde.php
        <script>
                @if($errors->any())
                    @foreach($errors->all() as $error)
                        toastr.error('{{ $error }}', 'Error', {
                            closeButton:true,
                            progressBar:true,
                        });
                    @endforeach

                @endif
            </script>

30. Setup ../TagController => function index()
           public function index()
              {
                  //
                  $tags = Tag::latest()->get();
                  return view('admin.tag.index', compact('tags'));
              }


31. Setup ../views/admin/tag/index.blade.php
        1. tr
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Created At</th>
                <th>Updated At</th>
            </tr>


        2. Delete <tbody>

        3. costum <tbody>
            <tbody>
                @foreach($tags as $key=>$tag)
                    <tr>
                        <td>{{ $key + 1 }}</td>
                        <td>{{ $tag->name }}</td>
                        <td>{{ $tag->created_at }}</td>
                        <td>{{ $tag->updated_at }}</td>
                    </tr>

                @endforeach
            </tbody>

         4. Rename : ALL TAGS
                    <h2>
                        EXPORTABLE TABLE
                    </h2>

         5. Delete
                     <ul class="header-dropdown m-r--5">
                        <li class="dropdown">
                            <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                <i class="material-icons">more_vert</i>
                            </a>
                            <ul class="dropdown-menu pull-right">
                                <li><a href="javascript:void(0);">Action</a></li>
                                <li><a href="javascript:void(0);">Another action</a></li>
                                <li><a href="javascript:void(0);">Something else here</a></li>
                            </ul>
                        </li>
                    </ul>

-----------------------------Comments--------------------------------------------------

1. Mettre data-table en français*
2. customiser ses bouttons , print-excel-...
3. Tag  champ image

4. https://codeseven.github.io/toastr/demo.html

__________________________________________________________________________________________________________________________



____________________________PART 7 -  Tag Edit and Delete ______________________________________________________________

1. Add <th>Action> at <thead> and <tfoot> | ../tag/index.blade.php
      <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Created At</th>
            <th>Updated At</th>
            <th>Action</th>
        </tr>
        </thead>
        <tfoot>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Created At</th>
            <th>Updated At</th>
            <th>Action</th>
        </tr>
        </tfoot>



2. Add <td>Action content    | ../tag/index.blade.php

     <td class="text-center">
        <a href="{{ route('admin.tag.edit', $tag->id) }}" class="btn btn-info waves-effect">
            <i class="material-icons">edit</i>
        </a>

        <a href="{{ route('admin.tag.edit', $tag->id) }}" class="btn btn-danger waves-effect">
            <i class="material-icons">delete</i>
        </a>

    </td>

3. Create edit page => ../tag/edit.blade.php (Copy of create.blade.php)

4. Set up edit function edit ()   | ../controllers/TagController.php
        public function edit($id)
            {
                //

                $tag = Tag::find($id);
                return view('admin.tag.edit', compact('tag'));

                //return $tag = Tag::find($id);
                //return $id;

            }

 5. Setup form action=""    and add @method="PUT"      | ../admin/tag/edit.blade.php

      <form action="{{ route('admin.tag.update', $tag->id) }}" method="POST">
            @csrf
            @method('PUT')


 6. Setup function update   | ../controllers/TagController.php

            public function update(Request $request, $id)
            {
                //

                $tag = Tag::find($id);
                $tag->name = $request->name;
                $tag->slug = str_slug($request->name);
                $tag->save();

                Toastr::success('Tag Succesfully Updated', 'Success');

                return redirect()->route('admin.tag.index');


                //return $request;
            }

7. Deleted

        - Link :
            https://sweetalert2.github.io/

8.  Copy scrpit to ../admin/tag/edit.blade.php

    <!--  sweetalert2@7.33.1   -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@7.33.1/dist/sweetalert2.all.min.js"></script>


9. Costum delete button   | ../admin/tag/index.blade.php

       <button class="btn btn-danger waves-effect" type="button" onclick="deleteTag({{ $tag->id }})">
           <i class="material-icons">delete</i>

       </button>

       <form id="delete-form-{{ $tag->id }}" action="{{ route('admin.tag.destroy', $tag->id) }}" method="POST" style="display: none;">
           @csrf
           @method('DELETE')

       </form>


10. Costum  | ../admin/tag/index.blade.php

    <script>
            function deleteTag() {
                const swalWithBootstrapButtons = Swal.mixin({
                    confirmButtonClass: 'btn btn-success',
                    cancelButtonClass: 'btn btn-danger',
                    buttonsStyling: false,
                })

                swalWithBootstrapButtons({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true
                }).then((result) => {
                    if (result.value) {
                        swalWithBootstrapButtons(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success'
                        )
                    } else if (
                        // Read more about handling dismissals
                        result.dismiss === Swal.DismissReason.cancel
                    ) {
                        swalWithBootstrapButtons(
                            'Cancelled',
                            'Your imaginary file is safe :)',
                            'error'
                        )
                    }
                })
            }
        </script>



11.

     if (result.value) {
            //event.preventDefault();
            document.getElementById('delete-form-'+id).submit();
        } else if (



12. Set up delete function


_______________________________________________________________________________________________________________________________________________

---------------------------------------PART 8 Create and show Category----------------------------------------------------------

1. Install image intervention

  http://image.intervention.io/

  $ composer require intervention/image

2. Make Category model
    $ php artisan make:model Category -m

3. Make Category Controller
    $ php artisan make:controller Admin/CategoryController -r

4. Set up /../migrations/create-categories

                    $table->string('name');
                    $table->string('slug');
                    $table->string('image')->default('default.png');


5. Migrate
    $ php artisan migrate


6. Create ../resources/views/admin/category (copy ./tag)

7. Set up category route
    /** Route admin */

    Route::group(['as'=>'admin.','prefix'=> 'admin', 'namespace'=>'Admin', 'middleware'=>['auth','admin']],
        function (){
            Route::get('dashboard', 'DashboardController@index')->name('dashboard');
            //  Route::resource('tag', 'TagController');
            Route::resource('tag','TagController');
        --> Route::resource('category', 'CategoryController', compact('categories');
        });

 8. Setup ../Categorycontroller -> function index ()

       public function index()
        {
            $categories = Category::latest()->get();

            return view('admin.category.index');
        }


 9. Setup ../admin/category/index.blade.php [rename Tag -> Category]

 10. Add bloc --> to /layout/backend/partial/sidebar.blade.php
         <li class="{{ Request::is('admin/category*') ? 'active' : '' }}">
            <a href="{{ route('admin.category.index') }}">
                <i class="material-icons">apps</i>
                <span>Category</span>
            </a>
        </li>


 11. Validate controle function store(Request $request) [CategoryController.php]

    $this->validate($request, [
                'name'  => 'required|unique:categories',
                'image' => 'required|mimes:jpeg,bmp,png,jpg'
            ]);


 12. Storage link
    $ php artisan storage:link

 13. Setup functon store category

    public function store(Request $request)
        {
            //return $request;

            $this->validate($request, [
                'name'  => 'required|unique:categories',
                'image' => 'required|mimes:jpeg,bmp,png,jpg'
            ]);

            //Get form image
            $image =$request->file('image');
            $slug = str_slug($request->name);
            if(isset($image)){
                //make unique name for image
                $currentDate = Carbon::now()->toDateString();
                $imagename = $slug.'-'.$currentDate.'-'.uniqid().'.'.$image->getClientOriginalExtension();

                //Check category dir is exists
                if (!Storage::disk('public')->exists('category')){
                    Storage::disk('public')->makeDirectory('category');
                }

                //resize image for category and upload
                $category = Image::make($image)->resize(1600,479)->save();
                Storage::disk('public')->put('category/'.$imagename,$category);

                //Check category slider dir is exists
                if (!Storage::disk('public')->exists('category/slider')){
                    Storage::disk('public')->makeDirectory('category/slider');
                }

                //resize image for category slider and upload
                $slider = Image::make($image)->resize(500,333)->save();
                Storage::disk('public')->put('category/slider/'.$imagename,$slider);


            }else{
                $imagename = "default.png";
            }

            $category        = new Category();
            $category->name  = $request->name;
            $category->slug  = $slug;
            $category->image = $imagename;
            $category->save();

            Toastr::success('Category créé avec succes :)', 'Success');

            return redirect()->route('admin.category.index');

        }




_______________________________________________________________________________________________________________________________________________

---------------------------------------ENd PART 8 Create and show Category----------------------------------------------------------



_______________________________________________________________________________________________________________________________________________

---------------------------------------PART 9 Edit Category----------------------------------------------------------

1. setup ../views/admin/category/edit.blade.php
        - add enctype="multipart/form-data" in tag form
        - rename all tag to category
        - add
            <div class="form-group">
                <input type="file" name="image">
            </div>

2. setup fonction update

     public function update(Request $request, $id)
        {
            //return $request;

            $this->validate($request, [
                'name'  => 'required',
                'image' => 'mimes:jpeg,bmp,png,jpg'
            ]);

            //Get form image
            $image =$request->file('image');
            $slug = str_slug($request->name);


            $category = Category::find($id);

            if(isset($image)){
                //make unique name for image
                $currentDate = Carbon::now()->toDateString();
                $imagename = $slug.'-'.$currentDate.'-'.uniqid().'.'.$image->getClientOriginalExtension();

                //Check category dir is exists
                if (!Storage::disk('public')->exists('category')){
                    Storage::disk('public')->makeDirectory('category');
                }


                //Delete old image
                if (Storage::disk('public')->exists('category/'.$category->image)){
                    Storage::disk('public')->delete('category/'.$category->image);
                }


                //resize image for category and upload
                $categoryImage = Image::make($image)->resize(1600,479)->save();
                Storage::disk('public')->put('category/'.$imagename,$categoryImage);

                //Check category slider dir is exists
                if (!Storage::disk('public')->exists('category/slider')){
                    Storage::disk('public')->makeDirectory('category/slider');
                }

                //Delete old image
                if (Storage::disk('public')->exists('category/slider/'.$category->image)){
                    Storage::disk('public')->delete('category/slider/'.$category->image);
                }

                //resize image for category slider and upload
                $slider = Image::make($image)->resize(500,333)->save();
                Storage::disk('public')->put('category/slider/'.$imagename,$slider);


            }else{
                $imagename = $category->image;
            }

            $category->name  = $request->name;
            $category->slug  = $slug;
            $category->image = $imagename;
            $category->save();

            Toastr::success('Le nom de la catégorie a été mise à jour :)', 'Success');

            return redirect()->route('admin.category.index');
        }


--------------------------------------- End PART 9 Edit Category----------------------------------------------------------



---------------------------------------PART 10 Delete Category----------------------------------------------------------
public function destroy($id)
    {
        //return $category = Category::find($id);

        $category = Category::find($id);

        if(Storage::disk('public')->exists('category/'.$category->image)){
            Storage::disk('public')->delete('category/'.$category->image);
        }

        if(Storage::disk('public')->exists('category/slider/'.$category->image)){
            Storage::disk('public')->delete('category/slider/'.$category->image);
        }

        $category->delete();

        Toastr::success('Categorie supprimée avec succes :)', 'Success');

        return redirect()->back();
    }


--------------------------------------- End PART 10 Delete Category----------------------------------------------------------

---------------------------------------PART 11 - Many to many relationship between ----------------------------------------------------------

1. Create post Model

    $ php artisan make:model Post -m


2. Migration category_post
    $ php make:migration create_category_post_table

3. Migration post_tag
    $ php make:migration create_post_tag_table


4. Setup Post migration

        public function up()
        {
            Schema::create('posts', function (Blueprint $table) {
                $table->increments('id');
                $table->integer('user_id')->unsigned();
                $table->string('title');
                $table->string('slug')->unique();
                $table->string('image')->default('default.png');
                $table->text('body');
                $table->integer('view_count')->default(0);
                $table->boolean('status')->default(false);
                $table->boolean('is_approved')->default(false);
                $table->foreign('user_id')
                      ->references('id')->on('users')
                      ->onDelete('cascade');
                $table->timestamps();
            });
        }

5. Setup migration create_category_post_table
        public function up()
        {
            Schema::create('category_post', function (Blueprint $table) {
                $table->increments('id');
                $table->integer('post_id');
                $table->integer('category_id');
                $table->timestamps();
            });
        }

6. Setup migration create_post_tag_table
        public function up()
        {
            Schema::create('post_tag', function (Blueprint $table) {
                $table->increments('id');
                $table->integer('post_id');
                $table->integer('tag_id');
                $table->timestamps();
            });
        }

7. Migrate
    $ php artisan migrate


8. ../User.php ==>

       //Bind Post model

        /**
         * @return \Illuminate\Database\Eloquent\Relations\HasMany
         */
        public function posts(){
            return $this->hasMany('App\Post');
        }

9. Setup Post model

    //UN et un seul user
        /**
         * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
         */
        public function user(){
            return $this->belongsTo('App\User');
        }

        //Une ou plusieurs catégories

        /**
         * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
         */
        public function categories(){
            return $this->belongsToMany('App\Category')->withTimestamps();
        }


        /**
         * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
         */
        public function tags(){
            return $this->belongsToMany('App\Tag')->withTimestamps();
        }


10. Setup Category Model
     /**
         * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
         */
        public function posts(){
            return $this->belongsToMany('App\Post')->withTimestamps();
        }

11. Setup Tag model
     /**
         * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
         */
        public function posts(){
            return $this->belongsToMany('App\Post')->withTimestamps();
        }

12.
    $ php artisan tinker

    $ App\Post::find(1)->categories

    $  App\Post::find(1)->user

    $ App\Post::find(1)

    $ App\User::find(1)->posts

    $ App\User::find(1)


---------------------------------------End PART 11 - Many to many relationship between ----------------------------------------------------------


---------------------------------------PART 12 - Show Posts with datatable ----------------------------------------------------------

1. Make PostController
    $ php artisan make:controller Admin/PostController --model=Post


2. Make Post route

    Route::group(['as'=>'admin.','prefix'=> 'admin', 'namespace'=>'Admin', 'middleware'=>['auth','admin']],
        function (){
            Route::get('dashboard', 'DashboardController@index')->name('dashboard');
            //  Route::resource('tag', 'TagController');
            Route::resource('tag','TagController');
            Route::resource('category', 'CategoryController');
       ==>  Route::resource('post', 'PostController');
        });

3. ../views/layouts/partial/sidebar.blade.php

        <li class="{{ Request::is('admin/post*') ? 'active' : '' }}">
            <a href="{{ route('admin.post.index') }}">
                <i class="material-icons">library_books</i>
                <span>Posts</span>
            </a>
        </li>

4. Copy ../views/admin/category and rename to post

5. Costumer post/index.blade.php

6. setup category/index.blade.php and tag/index
            ALL POSTS
            <span class="badge bg-blue">{{ $posts->count() }}</span>


           <td><span class="badge bg-primary">{{ $tag->posts->count() }}</span></td>



-------
Afficher aussi le nbre des post publié et non publié

---------------------------------------End PART 12 - Show Posts with datatable ----------------------------------------------------------

---------------------------------------PART 13 - Create Post----------------------------------------------------------


1. Setup PostController.php

       public function create()
        {
            return view('admin.post.create');
        }

2. add css

    @push('css')
        <!-- Bootstrap Select Css -->
        <link href="{{ asset('assets/backend/plugins/bootstrap-select/css/bootstrap-select.css') }}" rel="stylesheet" />
    @endpush


3. add js

    @push('js')
        <!-- Select Plugin Js -->
        <script src="{{ asset('assets/public/backend/plugins/bootstrap-select/js/bootstrap-select.js') }}"></script>

    @endpush

4. call Categories ans Tags to PostController.php

      public function create()
        {
            $categories = Category::all();
            $tags       = Tag::all();
            return view('admin.post.create', compact('categories', 'tags'));
        }

5. setup ../post/create.blade.php
    <?php
    /**
     * Created by PhpStorm.
     * User: gomab
     * Date: 3/17/19
     * Time: 12:32 AM
     */

    ?>

    @extends('layouts.backend.app')

    @section('title', 'post')

    @push('css')
        <!-- Bootstrap Select Css -->
        <link href="{{ asset('assets/backend/plugins/bootstrap-select/css/bootstrap-select.css') }}" rel="stylesheet" />
    @endpush

    @section('content')

       <div class="container-fuild">
           <!-- Vertical Layout | With Floating Label -->
           <form action="{{ route('admin.post.store') }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="row clearfix">
                   <div class="col-lg-8 col-md-12 col-sm-12 col-xs-12">
                       <div class="card">
                           <div class="header">
                               <h2>
                                   ADD NEW Post
                               </h2>
                           </div>
                           <div class="body">

                               <div class="form-group form-float">
                                   <div class="form-line">
                                       <input type="text" id="name" name="title" class="form-control">
                                       <label class="form-label">Titre de l'article</label>
                                   </div>
                               </div>

                               <div class="form-group">
                                   <label for="image">Image de l'article</label>
                                   <input type="file" name="image">
                               </div>

                               <div class="form-group">
                                   <input type="checkbox" id="publish" class="filled-in" name="status" value="1">
                                   <label for="publish">Publié</label>
                               </div>

                           </div>
                       </div>
                   </div>

                   <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12">
                       <div class="card">
                           <div class="header">
                               <h2>
                                   Catégories et Tags
                               </h2>
                           </div>
                           <div class="body">

                               <div class="form-group form-float">
                                   <div class="form-line {{ $errors->has('categories') ? 'focused error' : '' }}">
                                       <label for="category">Catégorie</label>
                                       <select name="categories[]" id="category" class="form-control show-tick" data-live-search="true" multiple>
                                           @foreach($categories as $category)
                                               <option value="{{ $category->id }}">{{ $category->name }}</option>

                                           @endforeach
                                       </select>
                                   </div>
                               </div>

                               <div class="form-group form-float">
                                   <div class="form-line {{ $errors->has('tags') ? 'focused error' : '' }}">
                                       <label for="tag">Tag</label>
                                       <select name="tags[]" id="tag" class="form-control show-tick" data-live-search="true" multiple>
                                           @foreach($tags as $tag)
                                               <option value="{{ $tag->id }}">{{ $tag->name }}</option>

                                           @endforeach
                                       </select>
                                   </div>
                               </div>



                               <a href="{{ route('admin.post.index') }}" class="btn btn-danger m-t-15 waves-effect">Back</a>

                               <button type="submit" class="btn btn-primary m-t-15 waves-effect">SUBMIT</button>

                           </div>
                       </div>
                   </div>
               </div>

               <div class="row clearfix">
                   <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                       <div class="card">
                           <div class="header">
                               <h2>
                                   Ecrire l'article...
                               </h2>
                           </div>
                           <div class="body">
                               <textarea name="body" id="tinymce" cols="30" rows="10"></textarea>
                           </div>
                       </div>
                   </div>
               </div>

           </form>
           <!-- Vertical Layout | With Floating Label -->
       </div>

    @endsection

    @push('js')
        <!-- Select Plugin Js -->
        <script src="{{ asset('assets/public/backend/plugins/bootstrap-select/js/bootstrap-select.js') }}"></script>

        <!-- TinyMCE -->
        <script src="{{ asset('assets/backend/plugins/tinymce/tinymce.js') }}"></script>

        <script>
            $(function () {
                //CKEditor
               // CKEDITOR.replace('ckeditor');
                //CKEDITOR.config.height = 300;

                //TinyMCE
                tinymce.init({
                    selector: "textarea#tinymce",
                    theme: "modern",
                    height: 300,
                    plugins: [
                        'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                        'searchreplace wordcount visualblocks visualchars code fullscreen',
                        'insertdatetime media nonbreaking save table contextmenu directionality',
                        'emoticons template paste textcolor colorpicker textpattern imagetools'
                    ],
                    toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                    toolbar2: 'print preview media | forecolor backcolor emoticons',
                    image_advtab: true
                });
                tinymce.suffix = ".min";
                tinyMCE.baseURL = '{{ asset('assets/backend/plugins/tinymce') }}';
            });
        </script>


    @endpush


6. Set function store => TagController.php

    public function store(Request $request)
        {
            //return $request->all();

            $this->validate($request, [
                'title' => 'required',
                'image' => 'required',
                'categories' => 'required',
                'tags' => 'required',
                'body' => 'required',
            ]);

            $image = $request->file('image');
            $slug = str_slug($request->title);

            if(isset($image)){
                //make unique name for image
                $currentDate = Carbon::now()->toDateString();
                $imageName = $slug.'-'.$currentDate.'-'.uniqid().'.'.$image->getClientOriginalExtension();

                if (!Storage::disk('public')->exists('post')){
                    Storage::disk('public')->makeDirectory('post');
                }

                $postImage = Image::make($image)->resize(1600, 1066)->save();
                Storage::disk('public')->put('post/'.$imageName, $postImage);
            }else{
                $imageName = "default.png";
            }

            $post = new Post();
            $post->user_id = Auth::id();
            $post->title   = $request->title;
            $post->slug    = $slug;
            $post->image   = $imageName;
            $post->body    = $request->body;

            if (isset($request->status)){
                $post->status = true;
            }else{
                $post->status = false;
            }

            $post->is_approved = true;
            $post->save();

            $post->categories()->attach($request->categories);
            $post->tags()->attach($request->tags);

            Toastr::success('Article créé :)', 'Success');

            return redirect()->route('admin.post.index');

        }





------

1. Costum msg error notification
2. Si article publié pendant la création, votre atticle a été publié sinon ...
3. Sous catégorie article publié et non publié

---------------------------------------End PART 13 - Create Post----------------------------------------------------------


---------------------------------------PART 15 - Edit Post----------------------------------------------------------
1. Setup public function edit() --> PostController.php

       public function edit(Post $post)
        {
            $categories = Category::all();
            $tags       = Tag::all();
            return view('admin.post.edit', compact('post','categories', 'tags'));
        }


2. Copy create.blade.php to edit.blade.php

3. value title

     <div class="form-group form-float">
         <div class="form-line">
             <input type="text" id="name" name="title" class="form-control" value="{{ $post->title }}">
             <label class="form-label">Titre de l'article</label>
         </div>
     </div>



4. value status

    <div class="form-group">
        <input type="checkbox" id="publish" class="filled-in" name="status" value="1" {{ $post->status == true ? 'checked' : '' }}>
        <label for="publish">Publié</label>
    </div>



5. Value Category

    <select name="categories[]" id="category" class="form-control show-tick" data-live-search="true" multiple>
        @foreach($categories as $category)
            <option
                    @foreach($post->categories as $postCategory)
                            {{ $postCategory->id == $category->id ? 'selected' : '' }}
                    @endforeach
                    value="{{ $category->id }}">{{ $category->name }}</option>

        @endforeach
    </select>


6. Value Tag

    <select name="tags[]" id="tag" class="form-control show-tick" data-live-search="true" multiple>
        @foreach($tags as $tag)
            <option
                    @foreach($post->tags as $postTag)
                    {{ $postTag->id == $tag->id ? 'selected' : '' }}
                    @endforeach

                    value="{{ $tag->id }}">{{ $tag->name }}</option>

        @endforeach
    </select>


7. Value Body

     <div class="body">
        <textarea name="body" id="tinymce" cols="30" rows="10">
            {{ $post->body }}
        </textarea>
    </div>


8.


